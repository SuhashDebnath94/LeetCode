The Chain of Responsibility Pattern is a behavioral design pattern that allows multiple objects to handle a request without coupling the sender to the receiver.
It creates a chain of processing objects, where each object decides whether to process the request or pass it to the next handler in the chain.

This pattern is particularly useful when multiple handlers may handle a request,
 or when you want to avoid tightly coupling the request sender to specific handlers.

 Decoupling Request Sender and Receivers:
    The client only knows about the first handler; the rest are connected dynamically.

 Dynamic Request Handling:
     Handlers can be added or removed easily without changing the client code.

 Simplified Maintenance:
    New handlers can be added by extending the chain, promoting the Open/Closed Principle.

 Practical uses:
     Logging Frameworks:
        Logging systems like Log4j or SLF4J use this pattern to pass log messages through different logging levels (DEBUG, INFO, WARN, ERROR).

     Authentication and Authorization:
         Middleware in web frameworks processes requests in stages, such as authentication, authorization, and validation.

     Event Handling in GUIs:
        GUI libraries (e.g., Java Swing) use this pattern to propagate user actions (e.g., button clicks) up a chain of components.

     Servlet Filters in Java EE:
        The Java Servlet API uses the Chain of Responsibility pattern for request processing.
        Filters process requests and responses in a chain before they reach the servlet.

