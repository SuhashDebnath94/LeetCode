The State Design Pattern is a behavioral design pattern that allows an object to alter its behavior when its internal state
 changes. It is often used to manage state-dependent behavior efficiently without resorting to complex conditional logic.


Problem it solves:
In systems where an object’s behavior depends on its current state, maintaining state-specific behavior can lead to:

    1) Tight Coupling: State management logic is often embedded directly in the context class, making it difficult to extend or modify.
    2) Complex Conditional Logic: Using if-else or switch statements for each possible state increases complexity as the number of states grows.
    3) Reduced Maintainability: Adding or modifying states requires changes to multiple parts of the code.
The State Pattern addresses these problems by encapsulating state-specific behavior into separate classes.

State Interface: Defines the behavior associated with a particular state.
    Concrete State Classes: Implement the state-specific behavior.
    Context Class: Maintains a reference to the current state object and delegates state-specific behavior to it. The context can transition between states by changing its reference to a different state object.

Real-World Use Cases
    Traffic Control Systems:
        Managing traffic lights or signaling mechanisms.
    Workflow Systems:
        Document approval workflows (e.g., Draft → Moderation → Published).
    Game Development:
        Character states like idle, running, jumping, or attacking.
    ATMs:
        ATM states like idle, card inserted, PIN entered, transaction processing, or out of service.
    Media Players:
        States such as Playing, Paused, Stopped.
    Vending Machines:
        States like accepting coins, dispensing items, or out of stock.