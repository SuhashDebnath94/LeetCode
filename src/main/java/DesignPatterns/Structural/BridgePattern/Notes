The Bridge Design Pattern is a structural design pattern that decouples an abstraction from its implementation so that the two can vary independently.
It provides a way to split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—that can be developed independently of each other.


Problem It Aims to Solve:
    1) Tightly Coupled Abstraction and Implementation: In scenarios where abstraction and its implementation are tightly coupled, any change to the implementation affects the abstraction, and vice versa.
    2) Explosion of Classes: When combining multiple dimensions of variability (e.g., multiple types of devices and multiple operating systems), subclassing leads to a combinatorial explosion of classes.
    3) Code Reusability: Hardcoding implementations into abstractions makes it difficult to reuse either independently.
The Bridge Pattern solves these problems by introducing an intermediary interface (the bridge) between the abstraction and the implementation.

Key Concepts
    1) Abstraction: Defines the high-level control and delegates implementation-specific work to the implementor.
    2) Implementor Interface: Defines the interface for the implementation classes.
    3) Concrete Implementor: Implements the implementor interface.
    4) Refined Abstraction: Extends the abstraction and uses implementor objects for functionality.

Real-World Use Cases
    1) GUI Toolkits: Separating platform-specific drawing code from UI elements (e.g., Java's Swing or AWT).
    2) Database Drivers: Abstracting database operations while allowing different database implementations (e.g., MySQL, PostgreSQL).
    3) Logging Frameworks: Abstracting logging mechanisms to support various logging libraries.
    4) Cloud Storage: Decoupling file operations (upload, download) from cloud storage providers (e.g., AWS S3, Azure Blob).


When to Use:
    1) Multiple Dimensions of Variability: When a system needs to support multiple dimensions that evolve independently (e.g., shapes and rendering methods).
    2) Avoiding Class Explosion: When subclassing for every combination leads to a proliferation of classes.
    3) Dynamic Implementations: When implementations may need to be swapped at runtime.
When Not to Use:
    1) Simple Use Cases: When there’s no need for multiple implementations or variations.
    2) Unchanging Implementations: If abstraction and implementation are static and unlikely to change independently.
    3) Overhead: Introducing unnecessary complexity for systems that don’t require decoupled hierarchies.